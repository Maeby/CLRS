/*
 * Author:     Maeby Peng, MaebyPeng@gmail.com
 * Date:       Oct 30, 2013
 * Update:     Oct 30, 2013
 * Problem:    CRLS 10.1-2
 * Difficulty: Easy
 *
 * Notes:
 * Explane how to implement two stacks in one array A[1 .. n] in such a way that neither stack overflows
 * unless the total number of elements in both stacks together is n. The PUSH and POP operations should 
 * run in O(1) time.
 *
 * Solution:
 * Start the top of first stack from A[1] and second stack from A[n]
 */
 
typedef struct two_stack_ {
   uint top_1;
   uint top_2;
} two_stack;

static two_stack S;

static void 
two_stack_initialize (uint *A)
{
    uint i;
    
    for (i = 0; i < n; i++) {
        A[i] = 0;
    }
    S.top_1 = 1;
    S.top_2 = n;
}

boolean 
two_stack_PUSH (uint *A, uint x, boolean first_stack)
{
    if (A[S.top_1] + 1 == A[S.top_2]) {
        printf("\nError: Overflow");    
    }
    
    if (first_stack) {
        S.top_1++;
        A[S.top_1] = x;
    } else {
        S.top_2--;
        A[S.top_2] = x;
    }
    return (TRUE);
}

uint 
two_stack_POP (uint *A, boolean first_stack)
{
    uint x;
    
    /*
     * Need to add check for underflow
     */
    if (first_stack) {
        x = A[S.top_1];
        S.top_1--;
    } else {
        x = A[S.top_2];
        S.top_2++;
    }
    return (x);
}
